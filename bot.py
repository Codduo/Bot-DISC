import discord
from discord.ext import commands, tasks
from discord import TextStyle
from discord.ui import View, Modal, TextInput, Button, Select
from discord import SelectOption
from math import ceil
import asyncio
import logging
import os
import json
import sys
import socket
import time
from datetime import datetime, date, time as dt_time
from dotenv import load_dotenv

# ===== SINGLE INSTANCE CONTROL =====
def get_single_instance_lock():
    """Cria um socket para garantir que apenas uma inst√¢ncia rode."""
    try:
        # Criar um socket que ser√° usado como lock
        lock_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        lock_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        # Tentar fazer bind em uma porta espec√≠fica
        # Se outra inst√¢ncia estiver rodando, isso falhar√°
        lock_socket.bind(('127.0.0.1', 65432))  # Porta espec√≠fica para este bot
        lock_socket.listen(1)
        
        print("‚úÖ Inst√¢ncia √∫nica confirmada - Bot pode iniciar")
        return lock_socket
        
    except OSError:
        print("‚ùå ERRO: J√° existe uma inst√¢ncia do bot rodando!")
        print("üîç Para verificar processos ativos:")
        print("   Linux/Mac: ps aux | grep python")
        print("   Windows: tasklist | findstr python")
        print("üõë Encerrando para evitar duplica√ß√£o...")
        sys.exit(1)

# ===== INITIALIZE LOGGING =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%d/%m/%Y %H:%M:%S"
)
logger = logging.getLogger('discord')
logger.setLevel(logging.INFO)

# Criar lock de inst√¢ncia √∫nica ANTES de tudo
lock_socket = get_single_instance_lock()

# ===== BOT SETUP =====
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.voice_states = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ===== DATA STORAGE =====
auto_roles = {}
ticket_response_channels = {}
mention_roles = {}
sugestao_channels = {}
ticket_categories = {}
ticket_support_roles = {}
aniversario_channels = {}  # Canais para enviar mensagens de anivers√°rio
mensagens_enviadas_hoje = {}  # Controle de mensagens j√° enviadas
ticket_logs_channels = {}  # Canais para logs de tickets fechados - por tipo

# Flag para controlar views
views_registered = False

# ===== ANIVERS√ÅRIO SYSTEM =====
def carregar_aniversarios():
    """Carrega os dados de anivers√°rio do JSON."""
    # Tentar diferentes locais e nomes de arquivo poss√≠veis
    locais_e_nomes = [
        # Na pasta atual
        "aniversarios.json",
        "aniversarios (1).json", 
        "aniversario.json",
        "Aniversarios.json",
        # Na subpasta Bot-DISC
        "Bot-DISC/aniversarios.json",
        "Bot-DISC/aniversarios (1).json",
        "Bot-DISC/aniversario.json",
        "Bot-DISC/Aniversarios.json",
        # Outros poss√≠veis caminhos
        "./Bot-DISC/aniversarios.json",
        os.path.join("Bot-DISC", "aniversarios.json")
    ]
    
    for caminho_arquivo in locais_e_nomes:
        try:
            if os.path.exists(caminho_arquivo):
                with open(caminho_arquivo, "r", encoding="utf-8") as f:
                    dados = json.load(f)
                    print(f"‚úÖ Arquivo {caminho_arquivo} carregado com {len(dados)} anivers√°rios")
                    return dados
        except Exception as e:
            print(f"‚ùå Erro ao carregar {caminho_arquivo}: {e}")
            continue
    
    print("‚ö†Ô∏è Nenhum arquivo de anivers√°rios encontrado")
    print("üîç Locais procurados:", ", ".join(locais_e_nomes))
    return {}

def carregar_controle_mensagens():
    """Carrega o controle de mensagens j√° enviadas."""
    try:
        if os.path.exists("mensagens_aniversario.json"):
            with open("mensagens_aniversario.json", "r", encoding="utf-8") as f:
                dados = json.load(f)
                mensagens_enviadas_hoje.update(dados)
                print("‚úÖ Controle de mensagens carregado")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar controle de mensagens: {e}")

def salvar_controle_mensagens():
    """Salva o controle de mensagens enviadas."""
    try:
        with open("mensagens_aniversario.json", "w", encoding="utf-8") as f:
            json.dump(mensagens_enviadas_hoje, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar controle de mensagens: {e}")

def limpar_controle_diario():
    """Limpa o controle de mensagens se mudou o dia."""
    hoje = date.today().isoformat()
    
    # Se h√° registros de outros dias, limpar
    if mensagens_enviadas_hoje and list(mensagens_enviadas_hoje.keys())[0] != hoje:
        print(f"üßπ Limpando controle de mensagens - novo dia: {hoje}")
        mensagens_enviadas_hoje.clear()
        mensagens_enviadas_hoje[hoje] = []
        salvar_controle_mensagens()
    
    # Se n√£o h√° registro para hoje, criar
    if hoje not in mensagens_enviadas_hoje:
        mensagens_enviadas_hoje[hoje] = []

def verificar_aniversariantes():
    """Verifica se h√° aniversariantes hoje."""
    aniversarios = carregar_aniversarios()
    hoje = date.today()
    aniversariantes = []
    
    print(f"üîç Verificando anivers√°rios para {hoje.strftime('%d/%m/%Y')} (dia {hoje.day}, m√™s {hoje.month})")
    
    for user_id, dados in aniversarios.items():
        try:
            # Converter string de data para objeto date
            data_nascimento = datetime.strptime(dados["data_nascimento"], "%Y-%m-%d").date()
            
            # Verificar se o dia e m√™s s√£o iguais ao de hoje
            if data_nascimento.day == hoje.day and data_nascimento.month == hoje.month:
                # Calcular idade
                idade = hoje.year - data_nascimento.year
                aniversariante = {
                    "user_id": user_id,
                    "nome": dados["nome"],
                    "idade": idade,
                    "link_foto": dados["link_foto"]
                }
                aniversariantes.append(aniversariante)
                print(f"   ‚úÖ ANIVERSARIANTE ENCONTRADO: {dados['nome']} ({idade} anos)")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao processar anivers√°rio de {user_id}: {e}")
    
    print(f"üìä Total de aniversariantes hoje: {len(aniversariantes)}")
    return aniversariantes

def ja_enviou_mensagem_hoje(user_id):
    """Verifica se j√° enviou mensagem para este usu√°rio hoje."""
    hoje = date.today().isoformat()
    return user_id in mensagens_enviadas_hoje.get(hoje, [])

def marcar_mensagem_enviada(user_id):
    """Marca que a mensagem foi enviada para este usu√°rio hoje."""
    hoje = date.today().isoformat()
    if hoje not in mensagens_enviadas_hoje:
        mensagens_enviadas_hoje[hoje] = []
    
    if user_id not in mensagens_enviadas_hoje[hoje]:
        mensagens_enviadas_hoje[hoje].append(user_id)
        salvar_controle_mensagens()

async def enviar_mensagem_aniversario(guild, aniversariante):
    """Envia mensagem de anivers√°rio personalizada."""
    guild_id = str(guild.id)
    canal_id = aniversario_channels.get(guild_id)
    
    if not canal_id:
        print(f"‚ö†Ô∏è Canal de anivers√°rio n√£o configurado para {guild.name}")
        return False
    
    canal = guild.get_channel(canal_id)
    if not canal:
        print(f"‚ö†Ô∏è Canal ID {canal_id} n√£o encontrado em {guild.name}")
        return False
    
    # Verificar se j√° enviou para este usu√°rio hoje
    if ja_enviou_mensagem_hoje(aniversariante["user_id"]):
        print(f"‚ö†Ô∏è Mensagem j√° enviada hoje para {aniversariante['nome']}")
        return False
    
    try:
        # Tentar pegar o membro do servidor
        member = guild.get_member(int(aniversariante["user_id"]))
        
        # Criar embed bonito
        embed = discord.Embed(
            title="üéâ FELIZ ANIVERS√ÅRIO! üéÇ",
            description=f"**{aniversariante['nome']}** ! üéà",
            color=0xFFD700  # Cor dourada
        )
        
        # Adicionar campos
        embed.add_field(
            name="üéÅ Desejamos", 
            value="Muitas felicidades, sa√∫de e prosperidade!", 
            inline=False
        )
        embed.add_field(
            name="üéä Idade", 
            value=f"{aniversariante['idade']} anos", 
            inline=True
        )

        if member:
            embed.add_field(
                name="üë§ Membro", 
                value=member.mention, 
                inline=True
            )
        
        # Adicionar foto se dispon√≠vel (local)
        foto_path = f"ani_colaboradores/{aniversariante['nome'].replace(' ', '_')}.png"
        if os.path.exists(foto_path):
            try:
                file = discord.File(foto_path, filename=f"{aniversariante['nome']}_aniversario.png")
                embed.set_image(url=f"attachment://{aniversariante['nome']}_aniversario.png")
                # Ser√° enviado junto com o embed
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar foto de {aniversariante['nome']}: {e}")
                file = None
        else:
            print(f"‚ö†Ô∏è Foto n√£o encontrada: {foto_path}")
            file = None
        
        embed.set_footer(text=f"Desejamos a voc√™ um feliz anivers√°rio {aniversariante['nome']}!")
        embed.timestamp = datetime.now()
        
        # Mensagem especial
        mensagens_especiais = [
            f"üéâ Todo mundo, vamos comemorar! Hoje √© anivers√°rio do(a) **{aniversariante['nome']}**! üéÇ",
            f"üéà Um feliz anivers√°rio para nosso(a) querido(a) **{aniversariante['nome']}**! üéÅ",
            f"üéä Parab√©ns, **{aniversariante['nome']}**! Que este novo ano seja incr√≠vel! üåü"
        ]
        
        import random
        mensagem = random.choice(mensagens_especiais)
        
        # Mencionar a pessoa se ela estiver no servidor
        if member:
            mensagem = f"{member.mention} {mensagem}"
        
        # Enviar mensagem com ou sem arquivo de foto
        if file:
            await canal.send(content=mensagem, embed=embed, file=file)
        else:
            await canal.send(content=mensagem, embed=embed)
        
        # Marcar como enviado
        marcar_mensagem_enviada(aniversariante["user_id"])
        
        print(f"‚úÖ Mensagem de anivers√°rio enviada para {aniversariante['nome']} em {guild.name}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar mensagem de anivers√°rio: {e}")
        return False

@tasks.loop(minutes=30)  # Verificar a cada 30 minutos
async def verificar_aniversarios_task():
    """Task que verifica anivers√°rios apenas √†s 7h da manh√£."""
    try:
        agora = datetime.now()
        
        # CORRE√á√ÉO: Remover a restri√ß√£o de hor√°rio para testar
        # Verificar se s√£o 7h da manh√£ (entre 7:00 e 7:29)
        # if agora.hour != 7:
        #     return
        
        print(f"üï∞Ô∏è S√£o {agora.strftime('%H:%M')} - Verificando anivers√°rios...")
        
        # Limpar controle di√°rio se necess√°rio
        limpar_controle_diario()
        
        aniversariantes = verificar_aniversariantes()
        
        if not aniversariantes:
            print("‚ÑπÔ∏è Nenhum aniversariante hoje")
            return
        
        print(f"üéâ {len(aniversariantes)} aniversariante(s) encontrado(s)!")
        
        # Enviar mensagem para todos os servidores configurados
        for guild in bot.guilds:
            for aniversariante in aniversariantes:
                # Verificar se a pessoa est√° neste servidor
                member = guild.get_member(int(aniversariante["user_id"]))
                if member:  # S√≥ enviar se a pessoa estiver no servidor
                    sucesso = await enviar_mensagem_aniversario(guild, aniversariante)
                    if sucesso:
                        print(f"‚úÖ Mensagem de anivers√°rio enviada para {aniversariante['nome']} em {guild.name}")
                    else:
                        print(f"‚ùå Falha ao enviar mensagem para {aniversariante['nome']} em {guild.name}")
    except Exception as e:
        print(f"‚ùå Erro na task de anivers√°rios: {e}")

@verificar_aniversarios_task.before_loop
async def before_verificar_aniversarios():
    """Espera o bot estar pronto antes de come√ßar a task."""
    await bot.wait_until_ready()
    print("ü§ñ Bot pronto - Iniciando verifica√ß√£o de anivers√°rios")

# ===== CONFIGURA√á√ïES DOS TIPOS DE SUPORTE =====
SUPPORT_TYPES = {
    "tecnico": {
        "name": "Suporte T√©cnico",
        "emoji": "üñ•Ô∏è",
        "role_id": 1359194954756264120,
        "description": "Para problemas t√©cnicos e TI"
    },
    "kommo": {
        "name": "Suporte Kommo",
        "emoji": "üì±",
        "role_id": 1373012855271719003,
        "description": "Para quest√µes do sistema Kommo"
    },
    "rh": {
        "name": "Suporte RH",
        "emoji": "üë•",
        "role_id": 1359505353653489694,
        "description": "Para quest√µes de Recursos Humanos"
    },
    "gerencia": {
        "name": "Suporte Ger√™ncia",
        "emoji": "üíº",
        "role_id": 1359504498048893070,
        "description": "Para quest√µes gerenciais"
    },
    "compras": {
        "name": "Compra de Produtos",
        "emoji": "üõí",
        "role_id": 1359505353653489694,  # Usando cargo do RH para compras
        "description": "Para solicita√ß√µes de compra de produtos"
    }
}

# ===== DATA MANAGEMENT =====
def salvar_dados():
    dados = {
        "auto_roles": auto_roles,
        "ticket_response_channels": ticket_response_channels,
        "mention_roles": mention_roles,
        "sugestao_channels": sugestao_channels,
        "ticket_categories": ticket_categories,
        "ticket_support_roles": ticket_support_roles,
        "aniversario_channels": aniversario_channels,
        "ticket_logs_channels": ticket_logs_channels,
    }
    
    try:
        with open("dados_servidor.json", "w", encoding="utf-8") as f:
            json.dump(dados, f, indent=4, ensure_ascii=False)
        print("‚úÖ Dados salvos com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar dados: {e}")

def carregar_dados():
    try:
        if os.path.exists("dados_servidor.json"):
            with open("dados_servidor.json", "r", encoding="utf-8") as f:
                dados = json.load(f)
                auto_roles.update(dados.get("auto_roles", {}))
                ticket_response_channels.update(dados.get("ticket_response_channels", {}))
                mention_roles.update(dados.get("mention_roles", {}))
                sugestao_channels.update(dados.get("sugestao_channels", {}))
                ticket_categories.update(dados.get("ticket_categories", {}))
                ticket_support_roles.update(dados.get("ticket_support_roles", {}))
                aniversario_channels.update(dados.get("aniversario_channels", {}))
                ticket_logs_channels.update(dados.get("ticket_logs_channels", {}))
                print("‚úÖ Dados carregados com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar dados: {e}")

# ===== TICKET MODAL =====
class TicketModal(Modal, title="Solicitar Cargo"):
    nome = TextInput(label="Nome", placeholder="Digite seu nome completo", style=TextStyle.short)
    cargo = TextInput(label="Setor / Cargo desejado", placeholder="Ex: Financeiro, RH...", style=TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            mod_channel_id = ticket_response_channels.get(str(interaction.guild.id))
            mod_channel = bot.get_channel(mod_channel_id) if mod_channel_id else None
            cargo_id = mention_roles.get(str(interaction.guild.id))

            # Tentar alterar nickname
            try:
                await interaction.user.edit(nick=self.nome.value)
            except discord.Forbidden:
                await interaction.response.send_message("‚ùå N√£o consegui alterar seu apelido (sem permiss√£o)", ephemeral=True)
                return
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao alterar nickname: {e}")

            if not mod_channel:
                await interaction.response.send_message("‚ùå Canal de tickets n√£o configurado. Contate um administrador.", ephemeral=True)
                return

            embed = discord.Embed(title="üìã Novo Pedido de Cargo", color=discord.Color.blurple())
            embed.add_field(name="üë§ Usu√°rio", value=interaction.user.mention, inline=False)
            embed.add_field(name="üìù Nome", value=self.nome.value, inline=True)
            embed.add_field(name="üíº Cargo desejado", value=self.cargo.value, inline=False)
            embed.set_footer(text=f"ID: {interaction.user.id}")
            embed.timestamp = datetime.now()

            mention = f"<@&{cargo_id}>" if cargo_id else ""
            await mod_channel.send(content=mention, embed=embed)
            await interaction.response.send_message("‚úÖ Pedido de cargo enviado com sucesso!", ephemeral=True)
            
        except Exception as e:
            print(f"‚ùå Erro no TicketModal: {e}")
            try:
                await interaction.response.send_message("‚ùå Erro interno. Tente novamente.", ephemeral=True)
            except:
                pass

class TicketButton(Button):
    def __init__(self):
        super().__init__(label="Solicitar cargo", emoji="üì¨", style=discord.ButtonStyle.secondary, custom_id="ticket_button")

    async def callback(self, interaction: discord.Interaction):
        try:
            await interaction.response.send_modal(TicketModal())
        except Exception as e:
            print(f"‚ùå Erro no TicketButton: {e}")

class TicketButtonView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(TicketButton())

# ===== TICKET SUPPORT SYSTEM =====
class TicketSupportModal(Modal, title="Abrir Ticket de Suporte"):
    assunto = TextInput(label="Assunto", placeholder="Descreva brevemente seu problema", style=TextStyle.short)
    descricao = TextInput(label="Descri√ß√£o detalhada", placeholder="Explique seu problema em detalhes...", style=TextStyle.paragraph)

    def __init__(self, support_type):
        super().__init__()
        self.support_type = support_type
        self.title = f"Ticket - {SUPPORT_TYPES[support_type]['name']}"
        
        # Personalizar campos para compra de produtos
        if support_type == "compras":
            self.assunto.label = "Nome do Produto"
            self.assunto.placeholder = "Digite o nome do produto que precisa ser comprado"
            self.descricao.label = "Por que precisa ser comprado?"
            self.descricao.placeholder = "Explique o motivo da compra e como ser√° utilizado..."

    async def on_submit(self, interaction: discord.Interaction):
        try:
            guild_id = str(interaction.guild.id)
            category_id = ticket_categories.get(guild_id)
            
            if not category_id:
                await interaction.response.send_message("‚ùå Sistema de tickets n√£o configurado. Use `!setupticket` primeiro.", ephemeral=True)
                return
                
            category = interaction.guild.get_channel(category_id)
            
            if not category:
                await interaction.response.send_message("‚ùå Categoria de tickets n√£o encontrada. Reconfigure com `!setupticket`.", ephemeral=True)
                return

            # Obter informa√ß√µes do tipo de suporte
            support_info = SUPPORT_TYPES[self.support_type]
            support_role = interaction.guild.get_role(support_info['role_id'])

            # Nome √∫nico do ticket
            ticket_name = f"ticket-{self.support_type}-{interaction.user.name.lower().replace(' ', '-')}"
            
            # Limitar o nome do canal
            if len(ticket_name) > 100:
                ticket_name = ticket_name[:97] + "..."
            
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True)
            }
            
            if support_role:
                overwrites[support_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True)

            # Criar canal do ticket
            ticket_channel = await interaction.guild.create_text_channel(
                name=ticket_name,
                category=category,
                overwrites=overwrites,
                topic=f"Ticket de {interaction.user.display_name} - {support_info['name']}"
            )
            
            embed = discord.Embed(
                title=f"üé´ {support_info['name']}",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            embed.add_field(name="üë§ Usu√°rio", value=interaction.user.mention, inline=True)
            embed.add_field(name="üìù Assunto", value=self.assunto.value, inline=True)
            embed.add_field(name="üè∑Ô∏è Tipo", value=f"{support_info['emoji']} {support_info['name']}", inline=True)
            embed.add_field(name="üìÑ Descri√ß√£o", value=self.descricao.value, inline=False)
            embed.set_footer(text=f"ID do usu√°rio: {interaction.user.id}")
            embed.set_thumbnail(url=interaction.user.display_avatar.url)
            
            close_view = TicketCloseView()
            
            mention_text = f"{interaction.user.mention}"
            if support_role:
                mention_text += f" <@&{support_info['role_id']}>"
                
            await ticket_channel.send(
                content=f"{mention_text}\n\n**Ol√° {interaction.user.mention}!** üëã\nSeu ticket de **{support_info['name']}** foi criado. Nossa equipe ir√° ajudar em breve.",
                embed=embed,
                view=close_view
            )
            
            await interaction.response.send_message(f"‚úÖ Ticket criado com sucesso: {ticket_channel.mention}", ephemeral=True)
            
        except Exception as e:
            print(f"‚ùå Erro ao criar ticket: {e}")
            try:
                await interaction.response.send_message(f"‚ùå Erro ao criar ticket: {str(e)}", ephemeral=True)
            except:
                pass

class SupportTypeSelect(Select):
    def __init__(self):
        options = []
        for key, info in SUPPORT_TYPES.items():
            options.append(SelectOption(
                label=info['name'],
                description=info['description'],
                emoji=info['emoji'],
                value=key
            ))
        
        super().__init__(
            placeholder="Selecione o tipo de suporte...",
            options=options
        )

    async def callback(self, interaction: discord.Interaction):
        try:
            support_type = self.values[0]
            modal = TicketSupportModal(support_type)
            await interaction.response.send_modal(modal)
        except Exception as e:
            print(f"‚ùå Erro no SupportTypeSelect: {e}")

class TicketSupportView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(SupportTypeSelect())

# ===== CLOSE TICKET SYSTEM =====
class TicketCloseView(View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="üîí Fechar Ticket", style=discord.ButtonStyle.danger, custom_id="close_ticket_button")
    async def close_ticket(self, interaction: discord.Interaction, button: Button):
        user_id = None
        
        try:
            async for message in interaction.channel.history(limit=20, oldest_first=True):
                if message.embeds and message.author == interaction.guild.me:
                    embed = message.embeds[0]
                    if embed.footer and "ID do usu√°rio:" in embed.footer.text:
                        user_id = int(embed.footer.text.split("ID do usu√°rio: ")[1])
                        break
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar dono do ticket: {e}")
        
        # Verificar se o usu√°rio tem permiss√£o (dono do ticket, admin, ou qualquer cargo de suporte)
        has_permission = (
            interaction.user.id == user_id or 
            interaction.user.guild_permissions.manage_channels or
            any(role.id in [info['role_id'] for info in SUPPORT_TYPES.values()] for role in interaction.user.roles)
        )
        
        if not has_permission:
            await interaction.response.send_message("‚ùå Voc√™ n√£o tem permiss√£o para fechar este ticket", ephemeral=True)
            return
            
        confirm_view = ConfirmCloseView()
        await interaction.response.send_message("‚ö†Ô∏è Tem certeza que deseja fechar este ticket?", view=confirm_view, ephemeral=True)

class ConfirmCloseView(View):
    def __init__(self):
        super().__init__(timeout=30)
        
    @discord.ui.button(label="‚úÖ Sim, fechar", style=discord.ButtonStyle.danger)
    async def confirm_close(self, interaction: discord.Interaction, button: Button):
        try:
            # Capturar informa√ß√µes do ticket antes de fechar
            ticket_info = await self.capturar_info_ticket(interaction)
            
            await interaction.response.send_message("üîí Fechando ticket em 3 segundos...")
            
            # Enviar log se as informa√ß√µes foram capturadas
            if ticket_info:
                print(f"üìä Enviando log para ticket tipo: {ticket_info.get('support_type', 'geral')}")
                await enviar_log_ticket(interaction.guild, ticket_info)
            else:
                print("‚ö†Ô∏è N√£o foi poss√≠vel capturar informa√ß√µes do ticket para log")
            
            await asyncio.sleep(3)
            await interaction.channel.delete(reason="Ticket fechado pelo usu√°rio")
        except Exception as e:
            print(f"‚ùå Erro ao fechar ticket: {e}")
    
    async def capturar_info_ticket(self, interaction):
        """Captura informa√ß√µes do ticket para o log."""
        try:
            ticket_info = {
                'channel_name': interaction.channel.name,
                'closed_by': interaction.user.id,
                'closed_by_name': interaction.user.display_name,
                'user_id': None,
                'user_name': 'Desconhecido',
                'type': 'Desconhecido',
                'emoji': '‚ùì',
                'subject': 'N√£o especificado',
                'description': 'N√£o especificado',
                'created_at': 'Desconhecido',
                'duration': 'Desconhecido',
                'support_type': 'geral',
                'chat_history': ''
            }
            
            # Capturar hist√≥rico de mensagens
            chat_messages = []
            async for message in interaction.channel.history(limit=1000, oldest_first=True):
                # Pular mensagens do sistema e embeds
                if message.author.bot and message.embeds:
                    continue
                    
                timestamp = message.created_at.strftime("%d/%m/%Y %H:%M:%S")
                author = message.author.display_name
                content = message.content if message.content else "[Arquivo/Embed]"
                
                chat_messages.append(f"[{timestamp}] {author}: {content}")
            
            ticket_info['chat_history'] = "\n".join(chat_messages)
            
            # Buscar embed original do ticket
            async for message in interaction.channel.history(limit=50, oldest_first=True):
                if message.embeds and message.author == interaction.guild.me:
                    embed = message.embeds[0]
                    
                    # Verificar se √© o embed do ticket
                    if "Ticket de" in embed.title or any("Suporte" in embed.title for _ in [embed.title]) or "Compra de Produtos" in embed.title:
                        # Extrair informa√ß√µes do embed
                        for field in embed.fields:
                            if field.name == "üë§ Usu√°rio":
                                # Extrair user ID da mention
                                import re
                                user_match = re.search(r'<@(\d+)>', field.value)
                                if user_match:
                                    ticket_info['user_id'] = int(user_match.group(1))
                                    user = interaction.guild.get_member(ticket_info['user_id'])
                                    if user:
                                        ticket_info['user_name'] = user.display_name
                            elif field.name == "üìù Assunto" or field.name == "Nome do Produto":
                                ticket_info['subject'] = field.value
                            elif field.name == "üìÑ Descri√ß√£o" or field.name == "Por que precisa ser comprado?":
                                ticket_info['description'] = field.value
                            elif field.name == "üè∑Ô∏è Tipo":
                                ticket_info['type'] = field.value
                                # Extrair emoji e determinar tipo de suporte
                                emoji_to_type = {
                                    'üñ•Ô∏è': 'tecnico',
                                    'üì±': 'kommo', 
                                    'üë•': 'rh',
                                    'üíº': 'gerencia',
                                    'üõí': 'compras'
                                }
                                
                                for emoji, support_type in emoji_to_type.items():
                                    if emoji in field.value:
                                        ticket_info['emoji'] = emoji
                                        ticket_info['support_type'] = support_type
                                        break
                        
                        # Calcular dura√ß√£o
                        if embed.timestamp:
                            created_time = embed.timestamp
                            now = datetime.now(created_time.tzinfo)
                            duration = now - created_time
                            
                            days = duration.days
                            hours, remainder = divmod(duration.seconds, 3600)
                            minutes = remainder // 60
                            
                            if days > 0:
                                ticket_info['duration'] = f"{days}d {hours}h {minutes}m"
                            elif hours > 0:
                                ticket_info['duration'] = f"{hours}h {minutes}m"
                            else:
                                ticket_info['duration'] = f"{minutes}m"
                            
                            ticket_info['created_at'] = created_time.strftime("%d/%m/%Y √†s %H:%M")
                        
                        break
            
            return ticket_info if ticket_info['user_id'] else None
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao capturar info do ticket: {e}")
            return None
            
    @discord.ui.button(label="‚ùå Cancelar", style=discord.ButtonStyle.secondary)
    async def cancel_close(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("‚úÖ Opera√ß√£o cancelada", ephemeral=True)

# ===== SUGGESTION SYSTEM =====
class SugestaoModal(Modal, title="Envie sua sugest√£o"):
    mensagem = TextInput(label="Escreva sua sugest√£o", style=TextStyle.paragraph, placeholder="Digite sua sugest√£o aqui...")

    async def on_submit(self, interaction):
        try:
            canal_id = sugestao_channels.get(str(interaction.guild.id))
            canal = bot.get_channel(canal_id) if canal_id else None
            
            if not canal:
                await interaction.response.send_message("‚ùå Canal de sugest√µes n√£o configurado", ephemeral=True)
                return
                
            embed = discord.Embed(title="üí° Nova Sugest√£o", description=self.mensagem.value, color=discord.Color.orange())
            embed.set_footer(text="Enviado anonimamente")
            embed.timestamp = datetime.now()
            
            await canal.send(embed=embed)
            await interaction.response.send_message("‚úÖ Sugest√£o enviada com sucesso!", ephemeral=True)
        except Exception as e:
            print(f"‚ùå Erro na sugest√£o: {e}")
            try:
                await interaction.response.send_message("‚ùå Erro ao enviar sugest√£o", ephemeral=True)
            except:
                pass

class SugestaoButton(Button):
    def __init__(self):
        super().__init__(label="Enviar sugest√£o", emoji="üí°", style=discord.ButtonStyle.secondary, custom_id="sugestao_button")

    async def callback(self, interaction):
        try:
            await interaction.response.send_modal(SugestaoModal())
        except Exception as e:
            print(f"‚ùå Erro no SugestaoButton: {e}")

class SugestaoView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(SugestaoButton())

# ===== BOT EVENTS =====
@bot.event
async def on_ready():
    global views_registered
    
    print(f"‚úÖ Bot conectado: {bot.user}")
    print(f"üîß Registrando views persistentes...")
    
    try:
        # Sempre registrar views frescas para garantir atualiza√ß√µes
        bot.add_view(TicketButtonView())
        bot.add_view(SugestaoView())
        bot.add_view(TicketSupportView())
        bot.add_view(TicketCloseView())
        views_registered = True
        print("‚úÖ Views registradas com sucesso")
        
        # Carregar controle de mensagens de anivers√°rio
        carregar_controle_mensagens()
        
        # CORRE√á√ÉO: For√ßar o in√≠cio da task de anivers√°rios
        if not verificar_aniversarios_task.is_running():
            verificar_aniversarios_task.start()
            print("üéÇ Sistema de anivers√°rios ATIVADO e funcionando!")
        else:
            print("üéÇ Sistema de anivers√°rios j√° estava rodando")
            
    except Exception as e:
        print(f"‚ùå Erro ao registrar views: {e}")

@bot.event
async def on_member_join(member):
    role_id = auto_roles.get(str(member.guild.id))
    if role_id:
        role = member.guild.get_role(role_id)
        if role:
            try:
                await member.add_roles(role)
                print(f"‚úÖ Cargo {role.name} dado para {member.name}")
            except Exception as e:
                print(f"‚ùå Erro ao dar cargo: {e}")

@bot.event
async def on_command_completion(ctx):
    salvar_dados()

@bot.event
async def on_guild_join(guild):
    salvar_dados()

@bot.event
async def on_guild_remove(guild):
    guild_id = str(guild.id)
    auto_roles.pop(guild_id, None)
    ticket_response_channels.pop(guild_id, None)
    mention_roles.pop(guild_id, None)
    sugestao_channels.pop(guild_id, None)
    ticket_categories.pop(guild_id, None)
    ticket_support_roles.pop(guild_id, None)
    aniversario_channels.pop(guild_id, None)
    ticket_logs_channels.pop(guild_id, None)
    salvar_dados()

# ===== TICKET LOG SYSTEM =====
async def enviar_log_ticket(guild, ticket_info):
    """Envia log do ticket fechado para o canal configurado do tipo espec√≠fico."""
    try:
        guild_id = str(guild.id)
        ticket_type = ticket_info.get('support_type', 'geral')
        
        # Buscar canal espec√≠fico para este tipo de ticket
        log_channels = ticket_logs_channels.get(guild_id, {})
        log_channel_id = log_channels.get(ticket_type)
        
        print(f"üîç Debug logs - Guild: {guild_id}, Tipo: {ticket_type}")
        print(f"üîç Canais configurados: {log_channels}")
        print(f"üîç Canal ID encontrado: {log_channel_id}")
        
        if not log_channel_id:
            print(f"‚ö†Ô∏è Canal de logs para {ticket_type} n√£o configurado em {guild.name}")
            return
            
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            print(f"‚ö†Ô∏è Canal de logs ID {log_channel_id} n√£o encontrado em {guild.name}")
            return
        
        # Criar embed do log
        embed = discord.Embed(
            title="üîí Ticket Fechado",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        
        embed.add_field(name="üë§ Usu√°rio", value=f"<@{ticket_info['user_id']}>", inline=True)
        embed.add_field(name="üè∑Ô∏è Tipo", value=f"{ticket_info['emoji']} {ticket_info['type']}", inline=True)
        embed.add_field(name="üìÖ Criado em", value=ticket_info['created_at'], inline=True)
        embed.add_field(name="üìù Assunto", value=ticket_info['subject'], inline=False)
        embed.add_field(name="üìÑ Descri√ß√£o", value=ticket_info['description'][:1000] + ("..." if len(ticket_info['description']) > 1000 else ""), inline=False)
        embed.add_field(name="üîí Fechado por", value=f"<@{ticket_info['closed_by']}>", inline=True)
        embed.add_field(name="‚è±Ô∏è Dura√ß√£o", value=ticket_info['duration'], inline=True)
        
        embed.set_footer(text=f"Canal: {ticket_info['channel_name']} | ID: {ticket_info['user_id']}")
        
        # Enviar embed principal
        await log_channel.send(embed=embed)
        
        # Enviar hist√≥rico do chat se dispon√≠vel
        if ticket_info.get('chat_history'):
            # Criar arquivo de texto com o hist√≥rico
            chat_content = f"=== HIST√ìRICO DO TICKET {ticket_info['channel_name']} ===\n"
            chat_content += f"Usu√°rio: {ticket_info['user_name']}\n"
            chat_content += f"Tipo: {ticket_info['type']}\n"
            chat_content += f"Criado em: {ticket_info['created_at']}\n"
            chat_content += f"Fechado por: {ticket_info['closed_by_name']}\n"
            chat_content += f"Dura√ß√£o: {ticket_info['duration']}\n\n"
            chat_content += "=== MENSAGENS ===\n\n"
            chat_content += ticket_info['chat_history']
            
            # Enviar como arquivo
            import io
            file_content = io.BytesIO(chat_content.encode('utf-8'))
            file = discord.File(file_content, filename=f"historico_{ticket_info['channel_name']}.txt")
            await log_channel.send("üìã **Hist√≥rico completo do chat:**", file=file)
        
        print(f"‚úÖ Log de ticket {ticket_type} enviado para {guild.name}")
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar log de ticket: {e}")

# ===== COMMANDS =====
@bot.command(aliases=["cargos"])
@commands.has_permissions(administrator=True)
async def cargo(ctx):
    roles = [r for r in ctx.guild.roles if not r.is_bot_managed() and r.name != "@everyone"]
    options = [SelectOption(label=r.name[:100], value=str(r.id)) for r in roles[:25]]

    if not options:
        await ctx.send("‚ö†Ô∏è Nenhum cargo encontrado")
        return

    class RoleSelect(Select):
        def __init__(self):
            super().__init__(placeholder="Selecione o cargo autom√°tico", options=options)

        async def callback(self, interaction: discord.Interaction):
            role_id = int(self.values[0])
            auto_roles[str(ctx.guild.id)] = role_id
            salvar_dados()
            role = ctx.guild.get_role(role_id)
            await interaction.response.send_message(f"‚úÖ Cargo autom√°tico configurado: **{role.name}**", ephemeral=True)

    view = View()
    view.add_item(RoleSelect())
    await ctx.send("üë• Selecione o cargo autom√°tico:", view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def setcargo(ctx):
    roles = [r for r in ctx.guild.roles if not r.is_bot_managed() and r.name != "@everyone"]
    options = [SelectOption(label=r.name[:100], value=str(r.id)) for r in roles[:25]]

    if not options:
        await ctx.send("‚ö†Ô∏è Nenhum cargo encontrado")
        return

    class MentionRoleSelect(Select):
        def __init__(self):
            super().__init__(placeholder="Cargo para mencionar nos tickets", options=options)

        async def callback(self, interaction: discord.Interaction):
            role_id = int(self.values[0])
            mention_roles[str(ctx.guild.id)] = role_id
            salvar_dados()
            role = ctx.guild.get_role(role_id)
            await interaction.response.send_message(f"üìå Cargo para mencionar configurado: **{role.name}**", ephemeral=True)

    view = View()
    view.add_item(MentionRoleSelect())
    await ctx.send("üî£ Selecione o cargo para mencionar nos tickets:", view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def ticket(ctx):
    channels = [c for c in ctx.guild.text_channels if c.permissions_for(ctx.guild.me).send_messages]
    if not channels:
        await ctx.send("‚ùå Nenhum canal dispon√≠vel")
        return

    options = [SelectOption(label=c.name[:100], value=str(c.id)) for c in channels[:25]]

    class ChannelSelect(Select):
        def __init__(self):
            super().__init__(placeholder="Canal para receber tickets", options=options)

        async def callback(self, interaction: discord.Interaction):
            channel_id = int(self.values[0])
            ticket_response_channels[str(ctx.guild.id)] = channel_id
            salvar_dados()
            await interaction.response.send_message(f"‚úÖ Canal de tickets configurado: <#{channel_id}>", ephemeral=True)
            
            # Enviar o painel de solicita√ß√£o de cargo
            embed = discord.Embed(
                title="üìã Solicitar Cargo",
                description="**Clique no bot√£o abaixo para solicitar um cargo no servidor!**\n\n"
                          "üìù **Como funciona:**\n"
                          "‚Ä¢ Clique em 'Solicitar cargo'\n"
                          "‚Ä¢ Preencha o formul√°rio\n"
                          "‚Ä¢ Aguarde a aprova√ß√£o da equipe\n\n"
                          "‚ö†Ô∏è **Importante:** Use apenas para solicita√ß√µes reais de cargo.",
                color=discord.Color.blue()
            )
            embed.set_footer(text="Sistema de solicita√ß√£o de cargos")
            
            await ctx.send(embed=embed, view=TicketButtonView())

    view = View()
    view.add_item(ChannelSelect())
    await ctx.send("üìå Escolha o canal para receber os tickets:", view=view)

# ===== COMANDO DE DEBUG =====
@bot.command()
@commands.has_permissions(administrator=True)
async def debugjson(ctx):
    """Debug para encontrar o arquivo JSON."""
    import os
    
    embed = discord.Embed(title="üîç Debug - Arquivo JSON", color=discord.Color.yellow())
    
    # Verificar diret√≥rio atual
    diretorio_atual = os.getcwd()
    embed.add_field(name="üìÅ Diret√≥rio atual", value=f"`{diretorio_atual}`", inline=False)
    
    # Listar arquivos na pasta
    arquivos = os.listdir(diretorio_atual)
    arquivos_json = [f for f in arquivos if f.endswith('.json')]
    
    if arquivos_json:
        lista_json = "\n".join([f"`{arquivo}`" for arquivo in arquivos_json])
        embed.add_field(name="üìÑ Arquivos JSON encontrados", value=lista_json, inline=False)
    else:
        embed.add_field(name="üìÑ Arquivos JSON", value="‚ùå Nenhum arquivo .json encontrado", inline=False)
    
    # Verificar especificamente os nomes poss√≠veis
    nomes_possiveis = ["aniversarios.json", "aniversarios (1).json", "aniversario.json"]
    for nome in nomes_possiveis:
        existe = os.path.exists(nome)
        status = "‚úÖ" if existe else "‚ùå"
        embed.add_field(name=f"üîç {nome}", value=f"{status} {'Existe' if existe else 'N√£o encontrado'}", inline=True)
    
    await ctx.send(embed=embed)

# ===== COMANDO DE ANIVERS√ÅRIO =====
@bot.command()
@commands.has_permissions(administrator=True)
async def aniversario(ctx):
    """Configura o canal para mensagens de anivers√°rio."""
    channels = [c for c in ctx.guild.text_channels if c.permissions_for(ctx.guild.me).send_messages]
    if not channels:
        await ctx.send("‚ùå Nenhum canal dispon√≠vel")
        return

    options = [SelectOption(label=c.name[:100], value=str(c.id)) for c in channels[:25]]

    class AniversarioChannelSelect(Select):
        def __init__(self):
            super().__init__(placeholder="Canal para mensagens de anivers√°rio", options=options)

        async def callback(self, interaction: discord.Interaction):
            channel_id = int(self.values[0])
            aniversario_channels[str(ctx.guild.id)] = channel_id
            salvar_dados()
            await interaction.response.send_message(f"üéÇ Canal de anivers√°rios configurado: <#{channel_id}>", ephemeral=True)

    view = View()
    view.add_item(AniversarioChannelSelect())
    await ctx.send("üéâ Escolha o canal para mensagens de anivers√°rio:", view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def testaraniversario(ctx):
    """Testa o sistema de anivers√°rio manualmente."""
    aniversariantes = verificar_aniversariantes()
    
    if not aniversariantes:
        await ctx.send("‚ÑπÔ∏è Nenhum aniversariante encontrado para hoje")
        return
    
    # Verificar se o canal est√° configurado
    guild_id = str(ctx.guild.id)
    if guild_id not in aniversario_channels:
        await ctx.send("‚ùå Configure o canal de anivers√°rios primeiro com `!aniversario`")
        return
    
    enviados = 0
    for aniversariante in aniversariantes:
        # Verificar se a pessoa est√° neste servidor
        member = ctx.guild.get_member(int(aniversariante["user_id"]))
        if member:
            sucesso = await enviar_mensagem_aniversario(ctx.guild, aniversariante)
            if sucesso:
                enviados += 1
    
    await ctx.send(f"‚úÖ {enviados} mensagem(s) de anivers√°rio enviada(s)!")

@bot.command()
@commands.has_permissions(administrator=True)
async def forceaniversario(ctx):
    """For√ßa a verifica√ß√£o de anivers√°rios AGORA (sem restri√ß√£o de hor√°rio)."""
    await ctx.send("üîÑ For√ßando verifica√ß√£o de anivers√°rios...")
    
    try:
        # Executar a fun√ß√£o diretamente
        await verificar_aniversarios_task()
        await ctx.send("‚úÖ Verifica√ß√£o de anivers√°rios executada!")
    except Exception as e:
        await ctx.send(f"‚ùå Erro: {e}")

@bot.command()
@commands.has_permissions(administrator=True)
async def debuganiversarios(ctx):
    """Debug detalhado dos anivers√°rios."""
    aniversarios = carregar_aniversarios()
    
    if not aniversarios:
        await ctx.send("‚ùå Nenhum anivers√°rio carregado")
        return
    
    hoje = date.today()
    embed = discord.Embed(title="üîç Debug Anivers√°rios Detalhado", color=discord.Color.blue())
    
    # Informa√ß√µes b√°sicas
    embed.add_field(name="üìÖ Data de hoje", value=f"{hoje.strftime('%d/%m/%Y')} (dia {hoje.day}, m√™s {hoje.month})", inline=False)
    embed.add_field(name="üìä Total carregado", value=f"{len(aniversarios)} pessoas", inline=True)
    
    # Status da task
    task_status = "‚úÖ Rodando" if verificar_aniversarios_task.is_running() else "‚ùå Parada"
    embed.add_field(name="üîÑ Task Status", value=task_status, inline=True)
    
    # Canal configurado
    guild_id = str(ctx.guild.id)
    canal_config = aniversario_channels.get(guild_id)
    if canal_config:
        embed.add_field(name="üì∫ Canal", value=f"<#{canal_config}>", inline=True)
    else:
        embed.add_field(name="üì∫ Canal", value="‚ùå N√£o configurado", inline=True)
    
    # Verificar anivers√°rios de hoje
    hoje_count = 0
    aniversariantes_hoje = []
    
    for user_id, dados in aniversarios.items():
        try:
            data_nascimento = datetime.strptime(dados["data_nascimento"], "%Y-%m-%d").date()
            
            if data_nascimento.day == hoje.day and data_nascimento.month == hoje.month:
                hoje_count += 1
                member = ctx.guild.get_member(int(user_id))
                status = "‚úÖ No servidor" if member else "‚ùå N√£o est√° no servidor"
                aniversariantes_hoje.append(f"**{dados['nome']}** - {status}")
                
        except Exception as e:
            embed.add_field(name=f"‚ùå Erro em {user_id}", value=f"Data: {dados.get('data_nascimento', 'N/A')}\nErro: {str(e)[:50]}", inline=True)
    
    embed.add_field(name="üéâ Anivers√°rios HOJE", value=f"{hoje_count} pessoas", inline=False)
    
    if aniversariantes_hoje:
        lista_hoje = "\n".join(aniversariantes_hoje[:5])  # M√°ximo 5
        if len(aniversariantes_hoje) > 5:
            lista_hoje += f"\n... e mais {len(aniversariantes_hoje) - 5}"
        embed.add_field(name="üìã Aniversariantes de hoje", value=lista_hoje, inline=False)
    
    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def carregarjson(ctx):
    """For√ßa o carregamento do JSON manualmente."""
    try:
        aniversarios = carregar_aniversarios()
        
        if aniversarios:
            embed = discord.Embed(title="‚úÖ JSON Carregado!", color=discord.Color.green())
            embed.add_field(name="üìä Total de pessoas", value=len(aniversarios), inline=True)
            
            # Mostrar algumas amostras
            amostras = list(aniversarios.items())[:3]
            for user_id, dados in amostras:
                member = ctx.guild.get_member(int(user_id))
                status = "‚úÖ No servidor" if member else "‚ùå N√£o est√° no servidor"
                embed.add_field(
                    name=f"üë§ {dados['nome'][:20]}...", 
                    value=f"Nascimento: {dados['data_nascimento']}\n{status}", 
                    inline=True
                )
            
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå N√£o foi poss√≠vel carregar o arquivo JSON")
            
    except Exception as e:
        await ctx.send(f"‚ùå Erro: {e}")

@bot.command()
async def listaraniversarios(ctx):
    """Lista todos os anivers√°rios do m√™s atual."""
    aniversarios = carregar_aniversarios()
    hoje = date.today()
    mes_atual = hoje.month
    
    print(f"üîç Listando anivers√°rios do m√™s {mes_atual} ({hoje.strftime('%B')})")
    
    aniversariantes_mes = []
    
    for user_id, dados in aniversarios.items():
        try:
            data_nascimento = datetime.strptime(dados["data_nascimento"], "%Y-%m-%d").date()
            print(f"   Verificando {dados['nome']}: nascimento m√™s {data_nascimento.month}")
            
            if data_nascimento.month == mes_atual:
                # Verificar se a pessoa est√° no servidor
                member = ctx.guild.get_member(int(user_id))
                if member:  # S√≥ adicionar se estiver no servidor
                    aniversariantes_mes.append({
                        "dia": data_nascimento.day,
                        "nome": dados["nome"],
                        "member": member
                    })
                    print(f"   ‚úÖ Adicionado: {dados['nome']} (dia {data_nascimento.day})")
                else:
                    print(f"   ‚ùå {dados['nome']} n√£o est√° no servidor")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro com {user_id}: {e}")
            continue
    
    print(f"üìä Total encontrado no servidor: {len(aniversariantes_mes)}")
    
    if not aniversariantes_mes:
        embed = discord.Embed(
            title=f"‚ÑπÔ∏è Anivers√°rios de {datetime.now().strftime('%B')}",
            description="Nenhum aniversariante neste m√™s no servidor",
            color=discord.Color.orange()
        )
        embed.add_field(name="üîç Debug", value=f"Verificados: {len(aniversarios)} registros\nM√™s atual: {mes_atual}", inline=False)
        await ctx.send(embed=embed)
        return
    
    # Ordenar por dia
    aniversariantes_mes.sort(key=lambda x: x["dia"])
    
    embed = discord.Embed(
        title=f"üéÇ Aniversariantes de {datetime.now().strftime('%B')}",
        color=discord.Color.gold()
    )
    
    lista = ""
    for aniv in aniversariantes_mes:
        status = "üéâ **HOJE!**" if aniv["dia"] == hoje.day else ""
        lista += f"**{aniv['dia']:02d}** - {aniv['nome']} {status}\n"
    
    embed.description = lista
    embed.set_footer(text=f"Total: {len(aniversariantes_mes)} aniversariante(s) no servidor")
    
    await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def setupticket(ctx):
    """Configura o sistema de tickets em duas etapas."""
    guild_id = str(ctx.guild.id)
    categories = ctx.guild.categories
    
    if not categories:
        await ctx.send("‚ùå **Erro:** N√£o h√° categorias no servidor.\nüìÅ Crie uma categoria primeiro usando as configura√ß√µes do servidor.")
        return
        
    # Criar lista de categorias
    category_list = "\n".join([f"`{i+1}.` {cat.name}" for i, cat in enumerate(categories[:10])])
    
    embed = discord.Embed(
        title="üìÅ Configura√ß√£o de Tickets - Categoria",
        description=f"**Categorias dispon√≠veis:**\n{category_list}\n\n**Digite o n√∫mero da categoria desejada:**",
        color=discord.Color.blue()
    )
    
    await ctx.send(embed=embed)
    
    def check_category(msg):
        return msg.author == ctx.author and msg.channel == ctx.channel and msg.content.isdigit()
    
    try:
        # Aguardar resposta do usu√°rio para categoria
        msg = await bot.wait_for('message', check=check_category, timeout=30.0)
        category_num = int(msg.content) - 1
        
        if 0 <= category_num < len(categories):
            selected_category = categories[category_num]
            ticket_categories[guild_id] = selected_category.id
            salvar_dados()
            
            # Confirma√ß√£o final
            success_embed = discord.Embed(
                title="‚úÖ Sistema de Tickets Configurado!",
                color=discord.Color.green()
            )
            success_embed.add_field(name="üìÅ Categoria", value=selected_category.name, inline=True)
            success_embed.add_field(name="üéØ Tipos Dispon√≠veis", value="\n".join([f"{info['emoji']} {info['name']}" for info in SUPPORT_TYPES.values()]), inline=False)
            success_embed.add_field(name="üìã Pr√≥ximo Passo", value="Use `!ticketpanel` para criar o painel", inline=False)
            
            await ctx.send(embed=success_embed)
            
        else:
            await ctx.send("‚ùå **Erro:** N√∫mero de categoria inv√°lido. Use `!setupticket` novamente.")
            
    except asyncio.TimeoutError:
        await ctx.send("‚è∞ **Tempo esgotado!** Use `!setupticket` novamente.")
    except ValueError:
        await ctx.send("‚ùå **Erro:** Digite apenas n√∫meros. Use `!setupticket` novamente.")

@bot.command()
@commands.has_permissions(administrator=True)
async def ticketpanel(ctx):
    guild_id = str(ctx.guild.id)
    
    if guild_id not in ticket_categories:
        await ctx.send("‚ùå Use `!setupticket` primeiro para configurar o sistema")
        return
        
    embed = discord.Embed(
        title="üé´ Sistema de Suporte",
        description="**Precisa de ajuda?** Selecione o tipo de suporte!\n\n"
                   "**üìã Tipos dispon√≠veis:**\n"
                   f"{SUPPORT_TYPES['tecnico']['emoji']} **{SUPPORT_TYPES['tecnico']['name']}** - {SUPPORT_TYPES['tecnico']['description']}\n"
                   f"{SUPPORT_TYPES['kommo']['emoji']} **{SUPPORT_TYPES['kommo']['name']}** - {SUPPORT_TYPES['kommo']['description']}\n"
                   f"{SUPPORT_TYPES['rh']['emoji']} **{SUPPORT_TYPES['rh']['name']}** - {SUPPORT_TYPES['rh']['description']}\n"
                   f"{SUPPORT_TYPES['gerencia']['emoji']} **{SUPPORT_TYPES['gerencia']['name']}** - {SUPPORT_TYPES['gerencia']['description']}\n"
                   f"{SUPPORT_TYPES['compras']['emoji']} **{SUPPORT_TYPES['compras']['name']}** - {SUPPORT_TYPES['compras']['description']}\n\n"
                   "‚úÖ **Como funciona:**\n"
                   "‚Ä¢ Selecione o tipo de suporte\n"
                   "‚Ä¢ Preencha o formul√°rio\n"
                   "‚Ä¢ Canal privado ser√° criado\n"
                   "‚Ä¢ Equipe especializada te ajudar√°\n\n"
                   "‚ö†Ô∏è **Use apenas para suporte real**",
        color=discord.Color.blue()
    )
    embed.set_footer(text="Selecione o tipo de suporte no menu abaixo")
    
    await ctx.send(embed=embed, view=TicketSupportView())

@bot.command()
@commands.has_permissions(administrator=True)
async def ticketlogs(ctx, tipo_ticket=None):
    """Configura canais para logs de tickets fechados por tipo.
    Uso: !ticketlogs [tipo]
    Tipos: tecnico, kommo, rh, gerencia, compras
    """
    
    if tipo_ticket and tipo_ticket not in SUPPORT_TYPES:
        tipos_disponiveis = ", ".join(SUPPORT_TYPES.keys())
        await ctx.send(f"‚ùå Tipo inv√°lido. Tipos dispon√≠veis: {tipos_disponiveis}")
        return
    
    # Buscar canais com permiss√£o mais ampla
    channels = [c for c in ctx.guild.text_channels if 
                c.permissions_for(ctx.guild.me).send_messages and 
                c.permissions_for(ctx.guild.me).read_messages]
    
    if not channels:
        await ctx.send("‚ùå Nenhum canal dispon√≠vel para o bot")
        return

    options = [SelectOption(label=c.name[:100], value=str(c.id)) for c in channels[:25]]
    
    if tipo_ticket:
        # Configurar canal espec√≠fico para um tipo
        support_info = SUPPORT_TYPES[tipo_ticket]
        
        class TicketLogChannelSelect(Select):
            def __init__(self, ticket_type):
                super().__init__(placeholder=f"Canal para logs de {support_info['name']}", options=options)
                self.ticket_type = ticket_type

            async def callback(self, interaction: discord.Interaction):
                channel_id = int(self.values[0])
                guild_id = str(ctx.guild.id)
                
                if guild_id not in ticket_logs_channels:
                    ticket_logs_channels[guild_id] = {}
                
                ticket_logs_channels[guild_id][self.ticket_type] = channel_id
                salvar_dados()
                
                await interaction.response.send_message(
                    f"üìä Canal de logs para **{support_info['emoji']} {support_info['name']}** configurado: <#{channel_id}>", 
                    ephemeral=True
                )

        view = View()
        view.add_item(TicketLogChannelSelect(tipo_ticket))
        await ctx.send(f"üìä Escolha o canal para logs de **{support_info['emoji']} {support_info['name']}**:", view=view)
        
    else:
        # Mostrar menu de tipos dispon√≠veis
        embed = discord.Embed(
            title="üìä Configurar Logs de Tickets",
            description="**Escolha o tipo de ticket para configurar o canal de logs:**\n\n",
            color=discord.Color.blue()
        )
        
        for key, info in SUPPORT_TYPES.items():
            guild_id = str(ctx.guild.id)
            current_channel = "N√£o configurado"
            
            if guild_id in ticket_logs_channels and key in ticket_logs_channels[guild_id]:
                channel_id = ticket_logs_channels[guild_id][key]
                current_channel = f"<#{channel_id}>"
            
            embed.add_field(
                name=f"{info['emoji']} {info['name']}", 
                value=f"**Canal atual:** {current_channel}\n**Comando:** `!ticketlogs {key}`", 
                inline=False
            )
        
        embed.set_footer(text="Use: !ticketlogs [tipo] para configurar cada tipo individualmente")
        await ctx.send(embed=embed)

@bot.command()
@commands.has_permissions(administrator=True)
async def reclamacao(ctx):
    canais = [c for c in ctx.guild.text_channels if c.permissions_for(ctx.guild.me).send_messages]
    options = [SelectOption(label=c.name[:100], value=str(c.id)) for c in canais[:25]]

    class CanalSelect(Select):
        def __init__(self):
            super().__init__(placeholder="Canal para sugest√µes", options=options)

        async def callback(self, interaction):
            canal_id = int(self.values[0])
            sugestao_channels[str(ctx.guild.id)] = canal_id
            salvar_dados()
            await interaction.response.send_message("‚úÖ Canal configurado!", ephemeral=True)
            
            # Enviar painel de sugest√µes
            embed = discord.Embed(
                title="üí° Sistema de Sugest√µes",
                description="**Tem uma sugest√£o para melhorar o servidor?**\n\n"
                          "üìù **Como funciona:**\n"
                          "‚Ä¢ Clique em 'Enviar sugest√£o'\n"
                          "‚Ä¢ Escreva sua ideia\n"
                          "‚Ä¢ Sua sugest√£o ser√° enviada anonimamente\n\n"
                          "üí≠ **Seja construtivo e respeitoso!**",
                color=discord.Color.orange()
            )
            embed.set_footer(text="Sistema de sugest√µes an√¥nimas")
            
            await ctx.send(embed=embed, view=SugestaoView())

    view = View()
    view.add_item(CanalSelect())
    await ctx.send("üîπ Escolha o canal para receber sugest√µes:", view=view)

@bot.command()
@commands.has_permissions(administrator=True)
async def clear(ctx):
    class ConfirmarLimpeza(Button):
        def __init__(self):
            super().__init__(label="Sim, limpar!", style=discord.ButtonStyle.danger)

        async def callback(self, interaction: discord.Interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message("‚ùå Apenas o autor pode confirmar", ephemeral=True)
                return

            await interaction.response.send_message("üßπ Limpando...")
            await asyncio.sleep(2)
            await ctx.channel.purge()
            
            aviso = await ctx.send("‚úÖ Canal limpo!")
            await asyncio.sleep(3)
            await aviso.delete()

    view = View()
    view.add_item(ConfirmarLimpeza())
    await ctx.send("‚ö†Ô∏è Limpar todas as mensagens?", view=view)

@bot.command()
async def ping(ctx):
    await ctx.send(f"üèì Pong! Lat√™ncia: `{round(bot.latency * 1000)}ms`")

@bot.command()
async def status(ctx):
    embed = discord.Embed(title="ü§ñ Status do Bot", color=discord.Color.green())
    embed.add_field(name="üìä Status", value="‚úÖ Online", inline=True)
    embed.add_field(name="üèì Ping", value=f"{round(bot.latency * 1000)}ms", inline=True)
    embed.add_field(name="üè† Servidores", value=len(bot.guilds), inline=True)
    embed.add_field(name="üë• Usu√°rios", value=len(bot.users), inline=True)
    embed.add_field(name="üìã Views", value="‚úÖ Ativas" if views_registered else "‚ùå Inativas", inline=True)
    embed.add_field(name="üîí Inst√¢ncia", value="‚úÖ √önica", inline=True)
    embed.add_field(name="üéÇ Anivers√°rios", value="‚úÖ Ativo" if verificar_aniversarios_task.is_running() else "‚ùå Inativo", inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name="ajuda")
async def ajuda(ctx):
    embed = discord.Embed(title="üìñ Comandos do Bot", color=discord.Color.green())
    
    # Comandos de configura√ß√£o
    embed.add_field(name="**‚öôÔ∏è Configura√ß√£o**", value="""
`!cargo` - Configurar cargo autom√°tico
`!setcargo` - Cargo para mencionar em tickets
`!ticket` - Sistema de solicita√ß√£o de cargos
`!setupticket` - Configurar sistema de suporte
`!ticketpanel` - Criar painel de tickets
`!ticketlogs [tipo]` - Configurar logs por tipo de ticket
`!reclamacao` - Sistema de sugest√µes
`!aniversario` - Configurar canal de anivers√°rios
""", inline=False)
    
    # Comandos de anivers√°rio
    embed.add_field(name="**üéÇ Anivers√°rios**", value="""
`!listaraniversarios` - Ver anivers√°rios do m√™s
`!testaraniversario` - Testar sistema (Admin)
`!forceaniversario` - For√ßar verifica√ß√£o (Admin)
`!debuganiversarios` - Debug detalhado (Admin)
`!carregarjson` - Recarregar dados (Admin)
""", inline=False)
    
    # Comandos utilit√°rios
    embed.add_field(name="**üîß Utilit√°rios**", value="""
`!clear` - Limpar canal
`!ping` - Testar lat√™ncia
`!status` - Status do bot
`!debugjson` - Debug arquivo JSON (Admin)
""", inline=False)
    
    embed.set_footer(text="Use !comando para executar ‚Ä¢ (Admin) = Apenas administradores")
    
    await ctx.send(embed=embed)

# ===== ERROR HANDLING =====
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Voc√™ n√£o tem permiss√£o para usar este comando")
    elif isinstance(error, commands.CommandNotFound):
        pass  # Ignorar comandos n√£o encontrados
    else:
        print(f"‚ùå Erro no comando: {error}")
        await ctx.send("‚ùå Ocorreu um erro interno. Tente novamente.")

# ===== CLEANUP ON EXIT =====
def cleanup_on_exit():
    """Limpa recursos ao sair."""
    try:
        if 'lock_socket' in globals():
            lock_socket.close()
        print("üßπ Recursos limpos")
    except:
        pass

import atexit
atexit.register(cleanup_on_exit)

# ===== MAIN =====
if __name__ == "__main__":
    try:
        print("üöÄ Iniciando Bot Bmz Server...")
        print(f"üîí PID: {os.getpid()}")
        
        # Carregar dados
        carregar_dados()
        
        # Carregar token
        load_dotenv()
        TOKEN = os.getenv("DISCORD_TOKEN")
        
        if not TOKEN:
            print("‚ùå Token n√£o encontrado no .env")
            sys.exit(1)
        
        # Iniciar bot
        bot.run(TOKEN)
        
    except KeyboardInterrupt:
        print("\nüõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
    finally:
        cleanup_on_exit()
        sys.exit(0)